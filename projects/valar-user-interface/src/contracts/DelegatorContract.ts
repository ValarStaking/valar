/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "contract_create(address,address,uint64)uint64": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "contract_setup(byte[32],(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,(uint64,uint64)[2]),uint64)void": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "delegation_terms_general": {
          "name": "DelegationTermsGeneral",
          "elements": [
            [
              "commission",
              "uint64"
            ],
            [
              "fee_round",
              "uint64"
            ],
            [
              "fee_setup",
              "uint64"
            ],
            [
              "fee_asset_id",
              "uint64"
            ],
            [
              "partner_address",
              "address"
            ],
            [
              "fee_round_partner",
              "uint64"
            ],
            [
              "fee_setup_partner",
              "uint64"
            ],
            [
              "rounds_setup",
              "uint64"
            ],
            [
              "rounds_confirm",
              "uint64"
            ]
          ]
        },
        "delegation_terms_balance": {
          "name": "DelegationTermsBalance",
          "elements": [
            [
              "stake_max",
              "uint64"
            ],
            [
              "cnt_breach_del_max",
              "uint64"
            ],
            [
              "rounds_breach",
              "uint64"
            ],
            [
              "gating_asa_list",
              "(uint64,uint64)[2]"
            ]
          ]
        }
      }
    },
    "contract_pay(txn)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "keys_confirm(address)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "keys_not_confirmed()(address,byte[100])": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "Message",
          "elements": [
            [
              "del_manager",
              "address"
            ],
            [
              "msg",
              "byte[100]"
            ]
          ]
        }
      }
    },
    "keys_not_submitted()(address,byte[100])": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "Message",
          "elements": [
            [
              "del_manager",
              "address"
            ],
            [
              "msg",
              "byte[100]"
            ]
          ]
        }
      }
    },
    "keys_submit((uint64,uint64,uint64,byte[32],byte[32],byte[64],address))((uint64,uint64,uint64),address,byte[100])": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "key_reg_txn_info": {
          "name": "KeyRegTxnInfo",
          "elements": [
            [
              "vote_first",
              "uint64"
            ],
            [
              "vote_last",
              "uint64"
            ],
            [
              "vote_key_dilution",
              "uint64"
            ],
            [
              "vote_pk",
              "byte[32]"
            ],
            [
              "selection_pk",
              "byte[32]"
            ],
            [
              "state_proof_pk",
              "byte[64]"
            ],
            [
              "sender",
              "address"
            ]
          ]
        },
        "output": {
          "name": "EarningsDistributionAndMessage",
          "elements": [
            [
              "earnings_distribution",
              "(uint64,uint64,uint64)"
            ],
            [
              "del_manager",
              "address"
            ],
            [
              "msg",
              "byte[100]"
            ]
          ]
        }
      }
    },
    "breach_limits()(bool,(uint64,uint64,uint64),address,byte[100])": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "BreachLimitsReturn",
          "elements": [
            [
              "max_breach_reached",
              "bool"
            ],
            [
              "earnings_distribution",
              "(uint64,uint64,uint64)"
            ],
            [
              "del_manager",
              "address"
            ],
            [
              "msg",
              "byte[100]"
            ]
          ]
        }
      }
    },
    "breach_pay()(address,byte[100])": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "Message",
          "elements": [
            [
              "del_manager",
              "address"
            ],
            [
              "msg",
              "byte[100]"
            ]
          ]
        }
      }
    },
    "breach_suspended()((uint64,uint64,uint64),address,byte[100])": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "EarningsDistributionAndMessage",
          "elements": [
            [
              "earnings_distribution",
              "(uint64,uint64,uint64)"
            ],
            [
              "del_manager",
              "address"
            ],
            [
              "msg",
              "byte[100]"
            ]
          ]
        }
      }
    },
    "contract_claim()(uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "EarningsDistribution",
          "elements": [
            [
              "user",
              "uint64"
            ],
            [
              "platform",
              "uint64"
            ],
            [
              "asset_id",
              "uint64"
            ]
          ]
        }
      }
    },
    "contract_expired()((uint64,uint64,uint64),address,byte[100])": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "EarningsDistributionAndMessage",
          "elements": [
            [
              "earnings_distribution",
              "(uint64,uint64,uint64)"
            ],
            [
              "del_manager",
              "address"
            ],
            [
              "msg",
              "byte[100]"
            ]
          ]
        }
      }
    },
    "contract_withdraw(address)(uint64,uint64,uint64)": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "EarningsDistribution",
          "elements": [
            [
              "user",
              "uint64"
            ],
            [
              "platform",
              "uint64"
            ],
            [
              "asset_id",
              "uint64"
            ]
          ]
        }
      }
    },
    "contract_delete(address)(uint64,uint64)": {
      "call_config": {
        "delete_application": "CALL"
      },
      "structs": {
        "output": {
          "name": "ContractDeleteReturn",
          "elements": [
            [
              "remaining_balance",
              "uint64"
            ],
            [
              "asset_id",
              "uint64"
            ]
          ]
        }
      }
    },
    "contract_report_expiry_soon(uint64,uint64)(address,byte[100])": {
      "call_config": {
        "no_op": "CALL"
      },
      "structs": {
        "output": {
          "name": "Message",
          "elements": [
            [
              "del_manager",
              "address"
            ],
            [
              "msg",
              "byte[100]"
            ]
          ]
        }
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCgpzbWFydF9jb250cmFjdHMuZGVsZWdhdG9yX2NvbnRyYWN0LmNvbnRyYWN0LkRlbGVnYXRvckNvbnRyYWN0LmNsZWFyX3N0YXRlX3Byb2dyYW06CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
  },
  "state": {
    "global": {
      "num_byte_slices": 9,
      "num_uints": 12
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "schema": {
    "global": {
      "declared": {
        "cnt_breach_del": {
          "type": "uint64",
          "key": "cnt_breach_del"
        },
        "del_beneficiary": {
          "type": "bytes",
          "key": "del_beneficiary"
        },
        "del_manager": {
          "type": "bytes",
          "key": "del_manager"
        },
        "delegation_terms_balance": {
          "type": "bytes",
          "key": "B",
          "descr": "Balance related delegation terms."
        },
        "delegation_terms_general": {
          "type": "bytes",
          "key": "G",
          "descr": "General delegation terms."
        },
        "fee_operational": {
          "type": "uint64",
          "key": "fee_operational"
        },
        "fee_operational_partner": {
          "type": "uint64",
          "key": "fee_operational_partner"
        },
        "noticeboard_app_id": {
          "type": "uint64",
          "key": "noticeboard_app_id"
        },
        "round_breach_last": {
          "type": "uint64",
          "key": "round_breach_last"
        },
        "round_claim_last": {
          "type": "uint64",
          "key": "round_claim_last"
        },
        "round_end": {
          "type": "uint64",
          "key": "round_end"
        },
        "round_ended": {
          "type": "uint64",
          "key": "round_ended"
        },
        "round_expiry_soon_last": {
          "type": "uint64",
          "key": "round_expiry_soon_last"
        },
        "round_start": {
          "type": "uint64",
          "key": "round_start"
        },
        "sel_key": {
          "type": "bytes",
          "key": "sel_key"
        },
        "state": {
          "type": "bytes",
          "key": "state"
        },
        "state_proof_key": {
          "type": "bytes",
          "key": "state_proof_key"
        },
        "tc_sha256": {
          "type": "bytes",
          "key": "tc_sha256"
        },
        "validator_ad_app_id": {
          "type": "uint64",
          "key": "validator_ad_app_id"
        },
        "vote_key": {
          "type": "bytes",
          "key": "vote_key"
        },
        "vote_key_dilution": {
          "type": "uint64",
          "key": "vote_key_dilution"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {},
      "reserved": {}
    }
  },
  "contract": {
    "name": "DelegatorContract",
    "desc": "\n    Contract between a delegator manager and a validator (a.k.a. node runner), for the latter to participate in\n    consensus on the behalf of the delegator beneficiary for specific amount of time and for a specific fee.\n    The contract terms and conditions are defined in this contract.\n    The contract also acts as an escrow account for the delegator's payment to the validator for the service.\n\n    Global state\n    ------------\n    noticeboard_app_id : UInt64\n        App ID of noticeboard platform to which this contract belongs to.\n    validator_ad_app_id : UInt64\n        App ID of validator ad to which this contract belongs to.\n\n\n    delegation_terms_general : DelegationTermsGeneral\n        General delegation terms agreed by delegator and validator to govern this contract.\n    fee_operational : UInt64\n        Calculated operational fee based on the agreed contract terms.\n    fee_operational_partner : UInt64\n        Calculated operational fee charged for convenience by the partner.\n    delegation_terms_balance : DelegationTermsBalance\n        Requirements for delegator beneficiary balance agreed by delegator and validator to govern this contract.\n\n    del_manager : Account\n        Delegator manager account.\n    del_beneficiary : UInt64\n        Delegator beneficiary account.\n\n    round_start : UInt64\n        Agreed start round of the contract, i.e. time of its creation.\n    round_end : UInt64\n        Agreed end round of the contract.\n    round_ended : UInt64\n        Actual round at which the contract ended.\n        Can be smaller than round_end in case of early contract end.\n\n    vote_key_dilution : UInt64\n        Vote key dilution parameter of the agreed participation key.\n    vote_pk = VotePk\n        Vote public key of the agreed participation key.\n    selection_pk : SelPk\n        Selection public key of the agreed participation key.\n    state_proof_pk = StateProofPk\n        State proof public key of the agreed participation key.\n\n    state : Bytes\n        State of the contract. Can be one of the following:\n            CREATED - contract has been created.\n            LIVE - contract is live.\n            READY - waiting for keys submission.\n            SET - contract terms have been set.\n            SUBMITTED - waiting for keys confirmation.\n            ENDED_NOT_SUBMITTED - keys have not been submitted in time.\n            ENDED_NOT_CONFIRMED - keys have not been confirmed in time.\n            ENDED_LIMITS - maximum number of limit breach events has been reached.\n            ENDED_WITHDREW - delegator withdrew from the contract prematurely.\n            ENDED_EXPIRED - contract has expired.\n            ENDED_SUSPENDED - delegator has been suspended by consensus.\n            ENDED_CANNOT_PAY - delegator cannot pay the validator (as funds could have been frozen and/or clawed back).\n\n    tc_sha256 : Sha256\n        Hash (i.e. SHA 256) of the Terms and Conditions defining the delegation contract concluded between the delegator\n        and validator.\n\n    cnt_breach_del : UInt64\n        Counter of limit breach events.\n    round_breach_last : UInt64\n        Number of round of last limit breach event.\n\n    round_claim_last : UInt64\n        Number of the round the operational fee was last claimed.\n\n    round_expiry_soon_last : UInt64\n        Number of the round it was last reported that the contract will expire soon.\n\n    Methods\n    -------\n    contract_create(\n        del_manager: arc4.Address,\n        del_beneficiary: arc4.Address,\n        noticeboard_app_id: UInt64,\n    ) -> Application:\n        Creates a new delegator contract and returns its app ID.\n\n    contract_setup(\n        delegation_terms_general: DelegationTermsGeneral,\n        delegation_terms_balance: DelegationTermsBalance,\n        rounds_duration: UInt64,\n    ) -> None:\n        Sets the delegation contract terms.\n\n    contract_pay(\n        txn: gtxn.Transaction,\n    ) -> None:\n        Pays the validator setup and operational fee.\n\n    keys_confirm(\n        del_manager: arc4.Address,\n    ) -> None:\n        Delegator confirms the participation keys.\n\n    keys_not_confirmed() -> Message:\n        Reports that keys have not been confirmed in time.\n\n    keys_not_submitted() -> Message:\n        Reports that keys have not been submitted in time.\n\n    keys_submit(\n        key_reg_txn_info : KeyRegTxnInfo,\n    ) -> EarningsDistributionAndMessage:\n        ValidatorAd submits the keys generated for the delegator beneficiary according to the contract terms.\n\n    breach_limits(\n    ) -> BreachLimitsReturn:\n        Reports that a limit breach event occurred.\n\n    breach_pay(\n    ) -> Message:\n        Reports that a payment for the fee cannot be made from DelegatorContract (due to freeze or claw back).\n\n    breach_suspended(\n    ) -> EarningsDistributionAndMessage:\n        Reports that the delegator beneficiary was suspended by consensus.\n\n    contract_claim(\n    ) -> EarningsDistribution:\n        Claims and distributes the operational fee of validator up to this round to the validator and noticeboard,\n        as well as to the partner.\n\n    contract_expired(\n    ) -> EarningsDistributionAndMessage:\n        Reports that a contract has expired.\n\n    contract_withdraw(\n        del_manager: arc4.Address,\n    ) -> EarningsDistribution:\n        Delegator gracefully withdraws from the contract prematurely.\n\n    contract_delete(\n        del_manager: arc4.Address,\n        updating : arc4.Bool,\n    ) -> ContractDeleteReturn:\n        Delegator deletes an ended contract and withdraws any remaining balance.\n\n    contract_report_expiry_soon(\n        before_expiry: UInt64,\n        report_period: UInt64,\n    ) -> Message:\n        Reports that the contract will expire soon.\n\n    Private methods\n    ---------------\n    _distribute_earnings(\n        amount: UInt64,\n        amount_partner: UInt64,\n    ) -> EarningsDistribution:\n        Internal method for distributing the earnings between the validator ad and the noticeboard platform,\n        as well as for distributing the earnings of the partner.\n\n    _is_eligible(\n    ) -> arc4.Bool:\n        Check if del_beneficiary meets the agreed balance limits or not\n\n    _try_return_fee(\n        fee_asset: Asset,\n        amt_return: UInt64,\n    ) -> None:\n        Tries to return the input fee amount of given asset to del_manager.\n        The fee cannot be returned if the del_manager is closed out or frozen for the given asset.\n\n    ",
    "methods": [
      {
        "name": "contract_create",
        "args": [
          {
            "type": "address",
            "name": "del_manager",
            "desc": "Manager address for the delegation contract."
          },
          {
            "type": "address",
            "name": "del_beneficiary",
            "desc": "Beneficiary address for the delegation contract."
          },
          {
            "type": "uint64",
            "name": "noticeboard_app_id",
            "desc": "App ID of the Noticeboard smart contract to which to tie this contract."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "uint64",
          "desc": "App ID of the created delegation contract application."
        },
        "desc": "Creates a new DelegatorContract.\nDefines delegator contract manager and beneficiary accounts. Defines Noticeboard and ValidatorAd app ID to which this contract belongs to."
      },
      {
        "name": "contract_setup",
        "args": [
          {
            "type": "byte[32]",
            "name": "tc_sha256",
            "desc": "Hash (i.e. SHA 256) of the Terms and Conditions defining the delegation contract concluded between the delegator and validator."
          },
          {
            "type": "(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64)",
            "name": "delegation_terms_general",
            "desc": "General delegation contract terms."
          },
          {
            "type": "(uint64,uint64,uint64,(uint64,uint64)[2])",
            "name": "delegation_terms_balance",
            "desc": "Balance delegation contract terms."
          },
          {
            "type": "uint64",
            "name": "rounds_duration",
            "desc": "Contract duration in number of rounds."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Sets the general and balance delegation contract terms.\nDefines contract start and end rounds. Opts in the payment asset if it is not ALGO."
      },
      {
        "name": "contract_pay",
        "args": [
          {
            "type": "txn",
            "name": "txn",
            "desc": "Transaction for the payment of the setup and operational fees."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Pays the validator setup and operational fee."
      },
      {
        "name": "keys_confirm",
        "args": [
          {
            "type": "address",
            "name": "del_manager",
            "desc": "Purported delegator manager account."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "void"
        },
        "desc": "Delegator manager confirms that the delegator beneficiary has confirmed the submitted keys.."
      },
      {
        "name": "keys_not_confirmed",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "(address,byte[100])",
          "desc": "Address of delegator manager."
        },
        "desc": "Reports that keys have not been confirmed in time."
      },
      {
        "name": "keys_not_submitted",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "(address,byte[100])",
          "desc": "Address of delegator manager."
        },
        "desc": "Reports that keys have not been submitted in time."
      },
      {
        "name": "keys_submit",
        "args": [
          {
            "type": "(uint64,uint64,uint64,byte[32],byte[32],byte[64],address)",
            "name": "key_reg_txn_info",
            "desc": "Information about the generated participation keys."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "((uint64,uint64,uint64),address,byte[100])",
          "desc": "Amount of earnings of the validator which equal the setup fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."
        },
        "desc": "ValidatorAd submits the keys generated for the delegator beneficiary according to the contract terms."
      },
      {
        "name": "breach_limits",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "(bool,(uint64,uint64,uint64),address,byte[100])",
          "desc": "Boolean denoting if maximum number of breaches has already been reached (True) or not (False)."
        },
        "desc": "Reports that a limit breach event occurred."
      },
      {
        "name": "breach_pay",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "(address,byte[100])",
          "desc": "Address of delegator manager."
        },
        "desc": "Reports that a payment for the fee cannot be made from DelegatorContract.\nThis can happen if the DelegatorContract payment asset has been frozen or clawed back by the asset manager."
      },
      {
        "name": "breach_suspended",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "((uint64,uint64,uint64),address,byte[100])",
          "desc": "Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."
        },
        "desc": "Reports that the delegator beneficiary was suspended by consensus."
      },
      {
        "name": "contract_claim",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "(uint64,uint64,uint64)",
          "desc": "Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."
        },
        "desc": "Claims operational fee of validator up to this round.\nCommission from the fee gets claimed by the noticeboard. Partner convenience fee gets claimed by the partner."
      },
      {
        "name": "contract_expired",
        "args": [],
        "readonly": false,
        "returns": {
          "type": "((uint64,uint64,uint64),address,byte[100])",
          "desc": "Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."
        },
        "desc": "Reports that a contract has expired."
      },
      {
        "name": "contract_withdraw",
        "args": [
          {
            "type": "address",
            "name": "del_manager",
            "desc": "Manager address for the delegation contract."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(uint64,uint64,uint64)",
          "desc": "Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted."
        },
        "desc": "Delegator gracefully withdraws from the contract prematurely.\nThe delegator beneficiary should issue a key deregistration transaction 320 round before this call."
      },
      {
        "name": "contract_delete",
        "args": [
          {
            "type": "address",
            "name": "del_manager",
            "desc": "Manager address for the delegation contract."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(uint64,uint64)",
          "desc": "Balance of the fee asset that remained in the contract."
        },
        "desc": "Delegator deletes an ended contract and withdraws any remaining balance.\nThere can be non-zero balance to withdraw if someone sent the contract some balance, or if it was not possible to claim the fee by validator and/or noticeboard if they had the asset frozen."
      },
      {
        "name": "contract_report_expiry_soon",
        "args": [
          {
            "type": "uint64",
            "name": "before_expiry",
            "desc": "How many rounds before contract end can the report be made."
          },
          {
            "type": "uint64",
            "name": "report_period",
            "desc": "How frequently can the report be made."
          }
        ],
        "readonly": false,
        "returns": {
          "type": "(address,byte[100])",
          "desc": "Address of delegator manager."
        },
        "desc": "Reports that the contract will expire soon.\nNotification message can be triggered only a pre-defined time in advance and with limited frequency to prevent spamming."
      }
    ],
    "networks": {}
  },
  "bare_call_config": {}
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the DelegatorContract smart contract.
 */
export type DelegatorContract = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'contract_create(address,address,uint64)uint64' | 'contract_create', {
      argsObj: {
        /**
         * Manager address for the delegation contract.
         */
        delManager: string
        /**
         * Beneficiary address for the delegation contract.
         */
        delBeneficiary: string
        /**
         * App ID of the Noticeboard smart contract to which to tie this contract.
         */
        noticeboardAppId: bigint | number
      }
      argsTuple: [delManager: string, delBeneficiary: string, noticeboardAppId: bigint | number]
      /**
       * App ID of the created delegation contract application.
       */
      returns: bigint
    }>
    & Record<'contract_setup(byte[32],(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,(uint64,uint64)[2]),uint64)void' | 'contract_setup', {
      argsObj: {
        /**
         * Hash (i.e. SHA 256) of the Terms and Conditions defining the delegation contract concluded between the delegator and validator.
         */
        tcSha256: Uint8Array
        /**
         * General delegation contract terms.
         */
        delegationTermsGeneral: [bigint | number, bigint | number, bigint | number, bigint | number, string, bigint | number, bigint | number, bigint | number, bigint | number]
        /**
         * Balance delegation contract terms.
         */
        delegationTermsBalance: [bigint | number, bigint | number, bigint | number, [[bigint | number, bigint | number], [bigint | number, bigint | number]]]
        /**
         * Contract duration in number of rounds.
         */
        roundsDuration: bigint | number
      }
      argsTuple: [tcSha256: Uint8Array, delegationTermsGeneral: [bigint | number, bigint | number, bigint | number, bigint | number, string, bigint | number, bigint | number, bigint | number, bigint | number], delegationTermsBalance: [bigint | number, bigint | number, bigint | number, [[bigint | number, bigint | number], [bigint | number, bigint | number]]], roundsDuration: bigint | number]
      returns: void
    }>
    & Record<'contract_pay(txn)void' | 'contract_pay', {
      argsObj: {
        /**
         * Transaction for the payment of the setup and operational fees.
         */
        txn: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [txn: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'keys_confirm(address)void' | 'keys_confirm', {
      argsObj: {
        /**
         * Purported delegator manager account.
         */
        delManager: string
      }
      argsTuple: [delManager: string]
      returns: void
    }>
    & Record<'keys_not_confirmed()(address,byte[100])' | 'keys_not_confirmed', {
      argsObj: {
      }
      argsTuple: []
      /**
       * Address of delegator manager.
       */
      returns: Message
    }>
    & Record<'keys_not_submitted()(address,byte[100])' | 'keys_not_submitted', {
      argsObj: {
      }
      argsTuple: []
      /**
       * Address of delegator manager.
       */
      returns: Message
    }>
    & Record<'keys_submit((uint64,uint64,uint64,byte[32],byte[32],byte[64],address))((uint64,uint64,uint64),address,byte[100])' | 'keys_submit', {
      argsObj: {
        /**
         * Information about the generated participation keys.
         */
        keyRegTxnInfo: [bigint | number, bigint | number, bigint | number, Uint8Array, Uint8Array, Uint8Array, string]
      }
      argsTuple: [keyRegTxnInfo: [bigint | number, bigint | number, bigint | number, Uint8Array, Uint8Array, Uint8Array, string]]
      /**
       * Amount of earnings of the validator which equal the setup fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted.
       */
      returns: EarningsDistributionAndMessage
    }>
    & Record<'breach_limits()(bool,(uint64,uint64,uint64),address,byte[100])' | 'breach_limits', {
      argsObj: {
      }
      argsTuple: []
      /**
       * Boolean denoting if maximum number of breaches has already been reached (True) or not (False).
       */
      returns: BreachLimitsReturn
    }>
    & Record<'breach_pay()(address,byte[100])' | 'breach_pay', {
      argsObj: {
      }
      argsTuple: []
      /**
       * Address of delegator manager.
       */
      returns: Message
    }>
    & Record<'breach_suspended()((uint64,uint64,uint64),address,byte[100])' | 'breach_suspended', {
      argsObj: {
      }
      argsTuple: []
      /**
       * Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted.
       */
      returns: EarningsDistributionAndMessage
    }>
    & Record<'contract_claim()(uint64,uint64,uint64)' | 'contract_claim', {
      argsObj: {
      }
      argsTuple: []
      /**
       * Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted.
       */
      returns: EarningsDistribution
    }>
    & Record<'contract_expired()((uint64,uint64,uint64),address,byte[100])' | 'contract_expired', {
      argsObj: {
      }
      argsTuple: []
      /**
       * Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted.
       */
      returns: EarningsDistributionAndMessage
    }>
    & Record<'contract_withdraw(address)(uint64,uint64,uint64)' | 'contract_withdraw', {
      argsObj: {
        /**
         * Manager address for the delegation contract.
         */
        delManager: string
      }
      argsTuple: [delManager: string]
      /**
       * Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted.
       */
      returns: EarningsDistribution
    }>
    & Record<'contract_delete(address)(uint64,uint64)' | 'contract_delete', {
      argsObj: {
        /**
         * Manager address for the delegation contract.
         */
        delManager: string
      }
      argsTuple: [delManager: string]
      /**
       * Balance of the fee asset that remained in the contract.
       */
      returns: ContractDeleteReturn
    }>
    & Record<'contract_report_expiry_soon(uint64,uint64)(address,byte[100])' | 'contract_report_expiry_soon', {
      argsObj: {
        /**
         * How many rounds before contract end can the report be made.
         */
        beforeExpiry: bigint | number
        /**
         * How frequently can the report be made.
         */
        reportPeriod: bigint | number
      }
      argsTuple: [beforeExpiry: bigint | number, reportPeriod: bigint | number]
      /**
       * Address of delegator manager.
       */
      returns: Message
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      cntBreachDel?: IntegerState
      delBeneficiary?: BinaryState
      delManager?: BinaryState
      /**
       * Balance related delegation terms.
       */
      b?: BinaryState
      /**
       * General delegation terms.
       */
      g?: BinaryState
      feeOperational?: IntegerState
      feeOperationalPartner?: IntegerState
      noticeboardAppId?: IntegerState
      roundBreachLast?: IntegerState
      roundClaimLast?: IntegerState
      roundEnd?: IntegerState
      roundEnded?: IntegerState
      roundExpirySoonLast?: IntegerState
      roundStart?: IntegerState
      selKey?: BinaryState
      state?: BinaryState
      stateProofKey?: BinaryState
      tcSha256?: BinaryState
      validatorAdAppId?: IntegerState
      voteKey?: BinaryState
      voteKeyDilution?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type DelegatorContractSig = keyof DelegatorContract['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends DelegatorContractSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Represents a DelegationTermsGeneral result as a struct
 */
export type DelegationTermsGeneral = {
  commission: bigint
  feeRound: bigint
  feeSetup: bigint
  feeAssetId: bigint
  partnerAddress: string
  feeRoundPartner: bigint
  feeSetupPartner: bigint
  roundsSetup: bigint
  roundsConfirm: bigint
}
/**
 * Converts the tuple representation of a DelegationTermsGeneral to the struct representation
 */
export function DelegationTermsGeneral([commission, feeRound, feeSetup, feeAssetId, partnerAddress, feeRoundPartner, feeSetupPartner, roundsSetup, roundsConfirm]: [bigint, bigint, bigint, bigint, string, bigint, bigint, bigint, bigint] ) {
  return {
    commission,
    feeRound,
    feeSetup,
    feeAssetId,
    partnerAddress,
    feeRoundPartner,
    feeSetupPartner,
    roundsSetup,
    roundsConfirm,
  }
}
/**
 * Represents a DelegationTermsBalance result as a struct
 */
export type DelegationTermsBalance = {
  stakeMax: bigint
  cntBreachDelMax: bigint
  roundsBreach: bigint
  gatingAsaList: [[bigint, bigint], [bigint, bigint]]
}
/**
 * Converts the tuple representation of a DelegationTermsBalance to the struct representation
 */
export function DelegationTermsBalance([stakeMax, cntBreachDelMax, roundsBreach, gatingAsaList]: [bigint, bigint, bigint, [[bigint, bigint], [bigint, bigint]]] ) {
  return {
    stakeMax,
    cntBreachDelMax,
    roundsBreach,
    gatingAsaList,
  }
}
/**
 * Represents a Message result as a struct
 */
export type Message = {
  delManager: string
  msg: Uint8Array
}
/**
 * Converts the tuple representation of a Message to the struct representation
 */
export function Message([delManager, msg]: [string, Uint8Array] ) {
  return {
    delManager,
    msg,
  }
}
/**
 * Represents a KeyRegTxnInfo result as a struct
 */
export type KeyRegTxnInfo = {
  voteFirst: bigint
  voteLast: bigint
  voteKeyDilution: bigint
  votePk: Uint8Array
  selectionPk: Uint8Array
  stateProofPk: Uint8Array
  sender: string
}
/**
 * Converts the tuple representation of a KeyRegTxnInfo to the struct representation
 */
export function KeyRegTxnInfo([voteFirst, voteLast, voteKeyDilution, votePk, selectionPk, stateProofPk, sender]: [bigint, bigint, bigint, Uint8Array, Uint8Array, Uint8Array, string] ) {
  return {
    voteFirst,
    voteLast,
    voteKeyDilution,
    votePk,
    selectionPk,
    stateProofPk,
    sender,
  }
}
/**
 * Represents a EarningsDistributionAndMessage result as a struct
 */
export type EarningsDistributionAndMessage = {
  earningsDistribution: [bigint, bigint, bigint]
  delManager: string
  msg: Uint8Array
}
/**
 * Converts the tuple representation of a EarningsDistributionAndMessage to the struct representation
 */
export function EarningsDistributionAndMessage([earningsDistribution, delManager, msg]: [[bigint, bigint, bigint], string, Uint8Array] ) {
  return {
    earningsDistribution,
    delManager,
    msg,
  }
}
/**
 * Represents a BreachLimitsReturn result as a struct
 */
export type BreachLimitsReturn = {
  maxBreachReached: boolean
  earningsDistribution: [bigint, bigint, bigint]
  delManager: string
  msg: Uint8Array
}
/**
 * Converts the tuple representation of a BreachLimitsReturn to the struct representation
 */
export function BreachLimitsReturn([maxBreachReached, earningsDistribution, delManager, msg]: [boolean, [bigint, bigint, bigint], string, Uint8Array] ) {
  return {
    maxBreachReached,
    earningsDistribution,
    delManager,
    msg,
  }
}
/**
 * Represents a EarningsDistribution result as a struct
 */
export type EarningsDistribution = {
  user: bigint
  platform: bigint
  assetId: bigint
}
/**
 * Converts the tuple representation of a EarningsDistribution to the struct representation
 */
export function EarningsDistribution([user, platform, assetId]: [bigint, bigint, bigint] ) {
  return {
    user,
    platform,
    assetId,
  }
}
/**
 * Represents a ContractDeleteReturn result as a struct
 */
export type ContractDeleteReturn = {
  remainingBalance: bigint
  assetId: bigint
}
/**
 * Converts the tuple representation of a ContractDeleteReturn to the struct representation
 */
export function ContractDeleteReturn([remainingBalance, assetId]: [bigint, bigint] ) {
  return {
    remainingBalance,
    assetId,
  }
}
/**
 * Maps a method signature from the DelegatorContract smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends DelegatorContractSig> = DelegatorContract['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the DelegatorContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends DelegatorContractSig> = DelegatorContract['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type DelegatorContractCreateCalls = (typeof DelegatorContractCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type DelegatorContractCreateCallParams =
  | (TypedCallParams<'contract_create(address,address,uint64)uint64'> & (OnCompleteNoOp))
/**
 * A factory for available 'delete' calls
 */
export type DelegatorContractDeleteCalls = (typeof DelegatorContractCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type DelegatorContractDeleteCallParams =
  | TypedCallParams<'contract_delete(address)(uint64,uint64)'>
/**
 * Defines arguments required for the deploy method.
 */
export type DelegatorContractDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: DelegatorContractCreateCalls) => DelegatorContractCreateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: DelegatorContractDeleteCalls) => DelegatorContractDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class DelegatorContractCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the DelegatorContract smart contract using the contract_create(address,address,uint64)uint64 ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      contractCreate(args: MethodArgs<'contract_create(address,address,uint64)uint64'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'contract_create(address,address,uint64)uint64' as const,
          methodArgs: Array.isArray(args) ? args : [args.delManager, args.delBeneficiary, args.noticeboardAppId],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the DelegatorContract smart contract using the contract_delete(address)(uint64,uint64) ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      contractDelete(args: MethodArgs<'contract_delete(address)(uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'contract_delete(address)(uint64,uint64)' as const,
          methodArgs: Array.isArray(args) ? args : [args.delManager],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the contract_setup(byte[32],(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,(uint64,uint64)[2]),uint64)void ABI method
   *
   * Sets the general and balance delegation contract terms.
Defines contract start and end rounds. Opts in the payment asset if it is not ALGO.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static contractSetup(args: MethodArgs<'contract_setup(byte[32],(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,(uint64,uint64)[2]),uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'contract_setup(byte[32],(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,(uint64,uint64)[2]),uint64)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.tcSha256, args.delegationTermsGeneral, args.delegationTermsBalance, args.roundsDuration],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the contract_pay(txn)void ABI method
   *
   * Pays the validator setup and operational fee.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static contractPay(args: MethodArgs<'contract_pay(txn)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'contract_pay(txn)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.txn],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the keys_confirm(address)void ABI method
   *
   * Delegator manager confirms that the delegator beneficiary has confirmed the submitted keys..
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static keysConfirm(args: MethodArgs<'keys_confirm(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'keys_confirm(address)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.delManager],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the keys_not_confirmed()(address,byte[100]) ABI method
   *
   * Reports that keys have not been confirmed in time.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static keysNotConfirmed(args: MethodArgs<'keys_not_confirmed()(address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'keys_not_confirmed()(address,byte[100])' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the keys_not_submitted()(address,byte[100]) ABI method
   *
   * Reports that keys have not been submitted in time.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static keysNotSubmitted(args: MethodArgs<'keys_not_submitted()(address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'keys_not_submitted()(address,byte[100])' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the keys_submit((uint64,uint64,uint64,byte[32],byte[32],byte[64],address))((uint64,uint64,uint64),address,byte[100]) ABI method
   *
   * ValidatorAd submits the keys generated for the delegator beneficiary according to the contract terms.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static keysSubmit(args: MethodArgs<'keys_submit((uint64,uint64,uint64,byte[32],byte[32],byte[64],address))((uint64,uint64,uint64),address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'keys_submit((uint64,uint64,uint64,byte[32],byte[32],byte[64],address))((uint64,uint64,uint64),address,byte[100])' as const,
      methodArgs: Array.isArray(args) ? args : [args.keyRegTxnInfo],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the breach_limits()(bool,(uint64,uint64,uint64),address,byte[100]) ABI method
   *
   * Reports that a limit breach event occurred.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static breachLimits(args: MethodArgs<'breach_limits()(bool,(uint64,uint64,uint64),address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'breach_limits()(bool,(uint64,uint64,uint64),address,byte[100])' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the breach_pay()(address,byte[100]) ABI method
   *
   * Reports that a payment for the fee cannot be made from DelegatorContract.
This can happen if the DelegatorContract payment asset has been frozen or clawed back by the asset manager.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static breachPay(args: MethodArgs<'breach_pay()(address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'breach_pay()(address,byte[100])' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the breach_suspended()((uint64,uint64,uint64),address,byte[100]) ABI method
   *
   * Reports that the delegator beneficiary was suspended by consensus.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static breachSuspended(args: MethodArgs<'breach_suspended()((uint64,uint64,uint64),address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'breach_suspended()((uint64,uint64,uint64),address,byte[100])' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the contract_claim()(uint64,uint64,uint64) ABI method
   *
   * Claims operational fee of validator up to this round.
Commission from the fee gets claimed by the noticeboard. Partner convenience fee gets claimed by the partner.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static contractClaim(args: MethodArgs<'contract_claim()(uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'contract_claim()(uint64,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the contract_expired()((uint64,uint64,uint64),address,byte[100]) ABI method
   *
   * Reports that a contract has expired.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static contractExpired(args: MethodArgs<'contract_expired()((uint64,uint64,uint64),address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'contract_expired()((uint64,uint64,uint64),address,byte[100])' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the contract_withdraw(address)(uint64,uint64,uint64) ABI method
   *
   * Delegator gracefully withdraws from the contract prematurely.
The delegator beneficiary should issue a key deregistration transaction 320 round before this call.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static contractWithdraw(args: MethodArgs<'contract_withdraw(address)(uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'contract_withdraw(address)(uint64,uint64,uint64)' as const,
      methodArgs: Array.isArray(args) ? args : [args.delManager],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the contract_report_expiry_soon(uint64,uint64)(address,byte[100]) ABI method
   *
   * Reports that the contract will expire soon.
Notification message can be triggered only a pre-defined time in advance and with limited frequency to prevent spamming.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static contractReportExpirySoon(args: MethodArgs<'contract_report_expiry_soon(uint64,uint64)(address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'contract_report_expiry_soon(uint64,uint64)(address,byte[100])' as const,
      methodArgs: Array.isArray(args) ? args : [args.beforeExpiry, args.reportPeriod],
      ...params,
    }
  }
}

/**
 * A client to make calls to the DelegatorContract smart contract
 */
export class DelegatorContractClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `DelegatorContractClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof DelegatorContract['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the DelegatorContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: DelegatorContractDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(DelegatorContractCallFactory.create)
    const deleteArgs = params.deleteCall?.(DelegatorContractCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the DelegatorContract smart contract using the contract_create(address,address,uint64)uint64 ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result: App ID of the created delegation contract application.
       */
      async contractCreate(args: MethodArgs<'contract_create(address,address,uint64)uint64'>, params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'contract_create(address,address,uint64)uint64'>, AppCreateCallTransactionResult>(await $this.appClient.create(DelegatorContractCallFactory.create.contractCreate(args, params)))
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the DelegatorContract smart contract using the contract_delete(address)(uint64,uint64) ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result: Balance of the fee asset that remained in the contract.
       */
      async contractDelete(args: MethodArgs<'contract_delete(address)(uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'contract_delete(address)(uint64,uint64)'>>(await $this.appClient.delete(DelegatorContractCallFactory.delete.contractDelete(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the DelegatorContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the contract_setup(byte[32],(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,(uint64,uint64)[2]),uint64)void ABI method.
   *
   * Sets the general and balance delegation contract terms.
Defines contract start and end rounds. Opts in the payment asset if it is not ALGO.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public contractSetup(args: MethodArgs<'contract_setup(byte[32],(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,(uint64,uint64)[2]),uint64)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DelegatorContractCallFactory.contractSetup(args, params))
  }

  /**
   * Calls the contract_pay(txn)void ABI method.
   *
   * Pays the validator setup and operational fee.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public contractPay(args: MethodArgs<'contract_pay(txn)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DelegatorContractCallFactory.contractPay(args, params))
  }

  /**
   * Calls the keys_confirm(address)void ABI method.
   *
   * Delegator manager confirms that the delegator beneficiary has confirmed the submitted keys..
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public keysConfirm(args: MethodArgs<'keys_confirm(address)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DelegatorContractCallFactory.keysConfirm(args, params))
  }

  /**
   * Calls the keys_not_confirmed()(address,byte[100]) ABI method.
   *
   * Reports that keys have not been confirmed in time.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Address of delegator manager.
   */
  public keysNotConfirmed(args: MethodArgs<'keys_not_confirmed()(address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DelegatorContractCallFactory.keysNotConfirmed(args, params), Message)
  }

  /**
   * Calls the keys_not_submitted()(address,byte[100]) ABI method.
   *
   * Reports that keys have not been submitted in time.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Address of delegator manager.
   */
  public keysNotSubmitted(args: MethodArgs<'keys_not_submitted()(address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DelegatorContractCallFactory.keysNotSubmitted(args, params), Message)
  }

  /**
   * Calls the keys_submit((uint64,uint64,uint64,byte[32],byte[32],byte[64],address))((uint64,uint64,uint64),address,byte[100]) ABI method.
   *
   * ValidatorAd submits the keys generated for the delegator beneficiary according to the contract terms.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Amount of earnings of the validator which equal the setup fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted.
   */
  public keysSubmit(args: MethodArgs<'keys_submit((uint64,uint64,uint64,byte[32],byte[32],byte[64],address))((uint64,uint64,uint64),address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DelegatorContractCallFactory.keysSubmit(args, params), EarningsDistributionAndMessage)
  }

  /**
   * Calls the breach_limits()(bool,(uint64,uint64,uint64),address,byte[100]) ABI method.
   *
   * Reports that a limit breach event occurred.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Boolean denoting if maximum number of breaches has already been reached (True) or not (False).
   */
  public breachLimits(args: MethodArgs<'breach_limits()(bool,(uint64,uint64,uint64),address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DelegatorContractCallFactory.breachLimits(args, params), BreachLimitsReturn)
  }

  /**
   * Calls the breach_pay()(address,byte[100]) ABI method.
   *
   * Reports that a payment for the fee cannot be made from DelegatorContract.
This can happen if the DelegatorContract payment asset has been frozen or clawed back by the asset manager.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Address of delegator manager.
   */
  public breachPay(args: MethodArgs<'breach_pay()(address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DelegatorContractCallFactory.breachPay(args, params), Message)
  }

  /**
   * Calls the breach_suspended()((uint64,uint64,uint64),address,byte[100]) ABI method.
   *
   * Reports that the delegator beneficiary was suspended by consensus.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted.
   */
  public breachSuspended(args: MethodArgs<'breach_suspended()((uint64,uint64,uint64),address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DelegatorContractCallFactory.breachSuspended(args, params), EarningsDistributionAndMessage)
  }

  /**
   * Calls the contract_claim()(uint64,uint64,uint64) ABI method.
   *
   * Claims operational fee of validator up to this round.
Commission from the fee gets claimed by the noticeboard. Partner convenience fee gets claimed by the partner.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted.
   */
  public contractClaim(args: MethodArgs<'contract_claim()(uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DelegatorContractCallFactory.contractClaim(args, params), EarningsDistribution)
  }

  /**
   * Calls the contract_expired()((uint64,uint64,uint64),address,byte[100]) ABI method.
   *
   * Reports that a contract has expired.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted.
   */
  public contractExpired(args: MethodArgs<'contract_expired()((uint64,uint64,uint64),address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DelegatorContractCallFactory.contractExpired(args, params), EarningsDistributionAndMessage)
  }

  /**
   * Calls the contract_withdraw(address)(uint64,uint64,uint64) ABI method.
   *
   * Delegator gracefully withdraws from the contract prematurely.
The delegator beneficiary should issue a key deregistration transaction 320 round before this call.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Amount of earnings of the validator which equal any unclaimed operational fee minus platform commission, amount of platform earnings from the commission, and the asset in which the earnings are denoted.
   */
  public contractWithdraw(args: MethodArgs<'contract_withdraw(address)(uint64,uint64,uint64)'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DelegatorContractCallFactory.contractWithdraw(args, params), EarningsDistribution)
  }

  /**
   * Calls the contract_report_expiry_soon(uint64,uint64)(address,byte[100]) ABI method.
   *
   * Reports that the contract will expire soon.
Notification message can be triggered only a pre-defined time in advance and with limited frequency to prevent spamming.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call: Address of delegator manager.
   */
  public contractReportExpirySoon(args: MethodArgs<'contract_report_expiry_soon(uint64,uint64)(address,byte[100])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(DelegatorContractCallFactory.contractReportExpirySoon(args, params), Message)
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<DelegatorContract['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get cntBreachDel() {
        return DelegatorContractClient.getIntegerState(state, 'cnt_breach_del')
      },
      get delBeneficiary() {
        return DelegatorContractClient.getBinaryState(state, 'del_beneficiary')
      },
      get delManager() {
        return DelegatorContractClient.getBinaryState(state, 'del_manager')
      },
      get b() {
        return DelegatorContractClient.getBinaryState(state, 'B')
      },
      get g() {
        return DelegatorContractClient.getBinaryState(state, 'G')
      },
      get feeOperational() {
        return DelegatorContractClient.getIntegerState(state, 'fee_operational')
      },
      get feeOperationalPartner() {
        return DelegatorContractClient.getIntegerState(state, 'fee_operational_partner')
      },
      get noticeboardAppId() {
        return DelegatorContractClient.getIntegerState(state, 'noticeboard_app_id')
      },
      get roundBreachLast() {
        return DelegatorContractClient.getIntegerState(state, 'round_breach_last')
      },
      get roundClaimLast() {
        return DelegatorContractClient.getIntegerState(state, 'round_claim_last')
      },
      get roundEnd() {
        return DelegatorContractClient.getIntegerState(state, 'round_end')
      },
      get roundEnded() {
        return DelegatorContractClient.getIntegerState(state, 'round_ended')
      },
      get roundExpirySoonLast() {
        return DelegatorContractClient.getIntegerState(state, 'round_expiry_soon_last')
      },
      get roundStart() {
        return DelegatorContractClient.getIntegerState(state, 'round_start')
      },
      get selKey() {
        return DelegatorContractClient.getBinaryState(state, 'sel_key')
      },
      get state() {
        return DelegatorContractClient.getBinaryState(state, 'state')
      },
      get stateProofKey() {
        return DelegatorContractClient.getBinaryState(state, 'state_proof_key')
      },
      get tcSha256() {
        return DelegatorContractClient.getBinaryState(state, 'tc_sha256')
      },
      get validatorAdAppId() {
        return DelegatorContractClient.getIntegerState(state, 'validator_ad_app_id')
      },
      get voteKey() {
        return DelegatorContractClient.getBinaryState(state, 'vote_key')
      },
      get voteKeyDilution() {
        return DelegatorContractClient.getIntegerState(state, 'vote_key_dilution')
      },
    }
  }

  public compose(): DelegatorContractComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      contractSetup(args: MethodArgs<'contract_setup(byte[32],(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,(uint64,uint64)[2]),uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.contractSetup(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      contractPay(args: MethodArgs<'contract_pay(txn)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.contractPay(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      keysConfirm(args: MethodArgs<'keys_confirm(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.keysConfirm(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      keysNotConfirmed(args: MethodArgs<'keys_not_confirmed()(address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.keysNotConfirmed(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Message)
        return this
      },
      keysNotSubmitted(args: MethodArgs<'keys_not_submitted()(address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.keysNotSubmitted(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Message)
        return this
      },
      keysSubmit(args: MethodArgs<'keys_submit((uint64,uint64,uint64,byte[32],byte[32],byte[64],address))((uint64,uint64,uint64),address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.keysSubmit(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(EarningsDistributionAndMessage)
        return this
      },
      breachLimits(args: MethodArgs<'breach_limits()(bool,(uint64,uint64,uint64),address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.breachLimits(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(BreachLimitsReturn)
        return this
      },
      breachPay(args: MethodArgs<'breach_pay()(address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.breachPay(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Message)
        return this
      },
      breachSuspended(args: MethodArgs<'breach_suspended()((uint64,uint64,uint64),address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.breachSuspended(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(EarningsDistributionAndMessage)
        return this
      },
      contractClaim(args: MethodArgs<'contract_claim()(uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.contractClaim(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(EarningsDistribution)
        return this
      },
      contractExpired(args: MethodArgs<'contract_expired()((uint64,uint64,uint64),address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.contractExpired(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(EarningsDistributionAndMessage)
        return this
      },
      contractWithdraw(args: MethodArgs<'contract_withdraw(address)(uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.contractWithdraw(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(EarningsDistribution)
        return this
      },
      contractReportExpirySoon(args: MethodArgs<'contract_report_expiry_soon(uint64,uint64)(address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.contractReportExpirySoon(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(Message)
        return this
      },
      get delete() {
        const $this = this
        return {
          contractDelete(args: MethodArgs<'contract_delete(address)(uint64,uint64)'>, params?: AppClientComposeCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.contractDelete(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(ContractDeleteReturn)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as DelegatorContractComposer
  }
}
export type DelegatorContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the contract_setup(byte[32],(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,(uint64,uint64)[2]),uint64)void ABI method.
   *
   * Sets the general and balance delegation contract terms.
Defines contract start and end rounds. Opts in the payment asset if it is not ALGO.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  contractSetup(args: MethodArgs<'contract_setup(byte[32],(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,(uint64,uint64)[2]),uint64)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DelegatorContractComposer<[...TReturns, MethodReturn<'contract_setup(byte[32],(uint64,uint64,uint64,uint64,address,uint64,uint64,uint64,uint64),(uint64,uint64,uint64,(uint64,uint64)[2]),uint64)void'>]>

  /**
   * Calls the contract_pay(txn)void ABI method.
   *
   * Pays the validator setup and operational fee.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  contractPay(args: MethodArgs<'contract_pay(txn)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DelegatorContractComposer<[...TReturns, MethodReturn<'contract_pay(txn)void'>]>

  /**
   * Calls the keys_confirm(address)void ABI method.
   *
   * Delegator manager confirms that the delegator beneficiary has confirmed the submitted keys..
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  keysConfirm(args: MethodArgs<'keys_confirm(address)void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DelegatorContractComposer<[...TReturns, MethodReturn<'keys_confirm(address)void'>]>

  /**
   * Calls the keys_not_confirmed()(address,byte[100]) ABI method.
   *
   * Reports that keys have not been confirmed in time.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  keysNotConfirmed(args: MethodArgs<'keys_not_confirmed()(address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DelegatorContractComposer<[...TReturns, MethodReturn<'keys_not_confirmed()(address,byte[100])'>]>

  /**
   * Calls the keys_not_submitted()(address,byte[100]) ABI method.
   *
   * Reports that keys have not been submitted in time.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  keysNotSubmitted(args: MethodArgs<'keys_not_submitted()(address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DelegatorContractComposer<[...TReturns, MethodReturn<'keys_not_submitted()(address,byte[100])'>]>

  /**
   * Calls the keys_submit((uint64,uint64,uint64,byte[32],byte[32],byte[64],address))((uint64,uint64,uint64),address,byte[100]) ABI method.
   *
   * ValidatorAd submits the keys generated for the delegator beneficiary according to the contract terms.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  keysSubmit(args: MethodArgs<'keys_submit((uint64,uint64,uint64,byte[32],byte[32],byte[64],address))((uint64,uint64,uint64),address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DelegatorContractComposer<[...TReturns, MethodReturn<'keys_submit((uint64,uint64,uint64,byte[32],byte[32],byte[64],address))((uint64,uint64,uint64),address,byte[100])'>]>

  /**
   * Calls the breach_limits()(bool,(uint64,uint64,uint64),address,byte[100]) ABI method.
   *
   * Reports that a limit breach event occurred.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  breachLimits(args: MethodArgs<'breach_limits()(bool,(uint64,uint64,uint64),address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DelegatorContractComposer<[...TReturns, MethodReturn<'breach_limits()(bool,(uint64,uint64,uint64),address,byte[100])'>]>

  /**
   * Calls the breach_pay()(address,byte[100]) ABI method.
   *
   * Reports that a payment for the fee cannot be made from DelegatorContract.
This can happen if the DelegatorContract payment asset has been frozen or clawed back by the asset manager.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  breachPay(args: MethodArgs<'breach_pay()(address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DelegatorContractComposer<[...TReturns, MethodReturn<'breach_pay()(address,byte[100])'>]>

  /**
   * Calls the breach_suspended()((uint64,uint64,uint64),address,byte[100]) ABI method.
   *
   * Reports that the delegator beneficiary was suspended by consensus.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  breachSuspended(args: MethodArgs<'breach_suspended()((uint64,uint64,uint64),address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DelegatorContractComposer<[...TReturns, MethodReturn<'breach_suspended()((uint64,uint64,uint64),address,byte[100])'>]>

  /**
   * Calls the contract_claim()(uint64,uint64,uint64) ABI method.
   *
   * Claims operational fee of validator up to this round.
Commission from the fee gets claimed by the noticeboard. Partner convenience fee gets claimed by the partner.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  contractClaim(args: MethodArgs<'contract_claim()(uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DelegatorContractComposer<[...TReturns, MethodReturn<'contract_claim()(uint64,uint64,uint64)'>]>

  /**
   * Calls the contract_expired()((uint64,uint64,uint64),address,byte[100]) ABI method.
   *
   * Reports that a contract has expired.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  contractExpired(args: MethodArgs<'contract_expired()((uint64,uint64,uint64),address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DelegatorContractComposer<[...TReturns, MethodReturn<'contract_expired()((uint64,uint64,uint64),address,byte[100])'>]>

  /**
   * Calls the contract_withdraw(address)(uint64,uint64,uint64) ABI method.
   *
   * Delegator gracefully withdraws from the contract prematurely.
The delegator beneficiary should issue a key deregistration transaction 320 round before this call.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  contractWithdraw(args: MethodArgs<'contract_withdraw(address)(uint64,uint64,uint64)'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DelegatorContractComposer<[...TReturns, MethodReturn<'contract_withdraw(address)(uint64,uint64,uint64)'>]>

  /**
   * Calls the contract_report_expiry_soon(uint64,uint64)(address,byte[100]) ABI method.
   *
   * Reports that the contract will expire soon.
Notification message can be triggered only a pre-defined time in advance and with limited frequency to prevent spamming.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  contractReportExpirySoon(args: MethodArgs<'contract_report_expiry_soon(uint64,uint64)(address,byte[100])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): DelegatorContractComposer<[...TReturns, MethodReturn<'contract_report_expiry_soon(uint64,uint64)(address,byte[100])'>]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the DelegatorContract smart contract using the contract_delete(address)(uint64,uint64) ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    contractDelete(args: MethodArgs<'contract_delete(address)(uint64,uint64)'>, params?: AppClientComposeCallCoreParams): DelegatorContractComposer<[...TReturns, MethodReturn<'contract_delete(address)(uint64,uint64)'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the DelegatorContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): DelegatorContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): DelegatorContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<DelegatorContractComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<DelegatorContractComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type DelegatorContractComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type DelegatorContractComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
